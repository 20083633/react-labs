[{"C:\\Users\\niall\\Documents\\GitHub\\react-labs\\mern-lab-2-start\\frontend\\src\\index.js":"1","C:\\Users\\niall\\Documents\\GitHub\\react-labs\\mern-lab-2-start\\frontend\\src\\App.js":"2","C:\\Users\\niall\\Documents\\GitHub\\react-labs\\mern-lab-2-start\\frontend\\src\\reportWebVitals.js":"3","C:\\Users\\niall\\Documents\\GitHub\\react-labs\\mern-lab-2-start\\frontend\\src\\components\\Layout\\Layout.js":"4","C:\\Users\\niall\\Documents\\GitHub\\react-labs\\mern-lab-2-start\\frontend\\src\\components\\Nav\\Nav.js":"5","C:\\Users\\niall\\Documents\\GitHub\\react-labs\\mern-lab-2-start\\frontend\\src\\containers\\YourOrders\\YourOrders.js":"6","C:\\Users\\niall\\Documents\\GitHub\\react-labs\\mern-lab-2-start\\frontend\\src\\containers\\PizzaPal\\PizzaPal.js":"7","C:\\Users\\niall\\Documents\\GitHub\\react-labs\\mern-lab-2-start\\frontend\\src\\containers\\PlaceOrder\\PlaceOrder.js":"8","C:\\Users\\niall\\Documents\\GitHub\\react-labs\\mern-lab-2-start\\frontend\\src\\containers\\PlaceOrder\\OrderSuccess\\OrderSuccess.js":"9","C:\\Users\\niall\\Documents\\GitHub\\react-labs\\mern-lab-2-start\\frontend\\src\\containers\\YourAccount\\YourAccount.js":"10","C:\\Users\\niall\\Documents\\GitHub\\react-labs\\mern-lab-2-start\\frontend\\src\\containers\\Authenticate\\Authenticate.js":"11","C:\\Users\\niall\\Documents\\GitHub\\react-labs\\mern-lab-2-start\\frontend\\src\\containers\\YourAccount\\AccountUpdate\\AccountUpdate.js":"12","C:\\Users\\niall\\Documents\\GitHub\\react-labs\\mern-lab-2-start\\frontend\\src\\axios-orders.js":"13","C:\\Users\\niall\\Documents\\GitHub\\react-labs\\mern-lab-2-start\\frontend\\src\\components\\OrdersTable\\OrdersTable.js":"14","C:\\Users\\niall\\Documents\\GitHub\\react-labs\\mern-lab-2-start\\frontend\\src\\components\\Order\\Order.js":"15","C:\\Users\\niall\\Documents\\GitHub\\react-labs\\mern-lab-2-start\\frontend\\src\\components\\Menu\\Menu.js":"16","C:\\Users\\niall\\Documents\\GitHub\\react-labs\\mern-lab-2-start\\frontend\\src\\components\\Feedback\\Loader\\Loader.js":"17","C:\\Users\\niall\\Documents\\GitHub\\react-labs\\mern-lab-2-start\\frontend\\src\\components\\Order\\Checkout\\OrderSummary\\OrderSummary.js":"18","C:\\Users\\niall\\Documents\\GitHub\\react-labs\\mern-lab-2-start\\frontend\\src\\components\\Feedback\\ErrorModal\\ErrorModal.js":"19","C:\\Users\\niall\\Documents\\GitHub\\react-labs\\mern-lab-2-start\\frontend\\src\\components\\Order\\Checkout\\Checkout.js":"20","C:\\Users\\niall\\Documents\\GitHub\\react-labs\\mern-lab-2-start\\frontend\\src\\components\\Menu\\MenuItem\\MenuItem.js":"21","C:\\Users\\niall\\Documents\\GitHub\\react-labs\\mern-lab-2-start\\frontend\\src\\components\\Order\\Controls\\Controls.js":"22","C:\\Users\\niall\\Documents\\GitHub\\react-labs\\mern-lab-2-start\\frontend\\src\\components\\OrdersTable\\TableRow\\TableRow.js":"23","C:\\Users\\niall\\Documents\\GitHub\\react-labs\\mern-lab-2-start\\frontend\\src\\components\\Order\\Checkout\\OrderModal\\OrderModal.js":"24","C:\\Users\\niall\\Documents\\GitHub\\react-labs\\mern-lab-2-start\\frontend\\src\\components\\Order\\Controls\\Control\\Control.js":"25","C:\\Users\\niall\\Documents\\GitHub\\react-labs\\mern-lab-2-start\\frontend\\src\\context\\auth-context.js":"26"},{"size":523,"mtime":1619166180276,"results":"27","hashOfConfig":"28"},{"size":276,"mtime":1619166179575,"results":"29","hashOfConfig":"28"},{"size":375,"mtime":1619166180448,"results":"30","hashOfConfig":"28"},{"size":2631,"mtime":1619264602175,"results":"31","hashOfConfig":"28"},{"size":1297,"mtime":1619469238519,"results":"32","hashOfConfig":"28"},{"size":2294,"mtime":1619469839157,"results":"33","hashOfConfig":"28"},{"size":5812,"mtime":1619517063426,"results":"34","hashOfConfig":"28"},{"size":11732,"mtime":1619270538293,"results":"35","hashOfConfig":"28"},{"size":399,"mtime":1619166184589,"results":"36","hashOfConfig":"28"},{"size":5960,"mtime":1619469238519,"results":"37","hashOfConfig":"28"},{"size":11247,"mtime":1619186279184,"results":"38","hashOfConfig":"28"},{"size":8006,"mtime":1619469451249,"results":"39","hashOfConfig":"28"},{"size":136,"mtime":1619166179902,"results":"40","hashOfConfig":"28"},{"size":851,"mtime":1619166183599,"results":"41","hashOfConfig":"28"},{"size":1313,"mtime":1619270538252,"results":"42","hashOfConfig":"28"},{"size":713,"mtime":1619166181817,"results":"43","hashOfConfig":"28"},{"size":313,"mtime":1619166181251,"results":"44","hashOfConfig":"28"},{"size":1232,"mtime":1619166183016,"results":"45","hashOfConfig":"28"},{"size":774,"mtime":1619166181047,"results":"46","hashOfConfig":"28"},{"size":821,"mtime":1619166182650,"results":"47","hashOfConfig":"28"},{"size":386,"mtime":1619166182026,"results":"48","hashOfConfig":"28"},{"size":698,"mtime":1619166183210,"results":"49","hashOfConfig":"28"},{"size":619,"mtime":1619166183767,"results":"50","hashOfConfig":"28"},{"size":1162,"mtime":1619166182829,"results":"51","hashOfConfig":"28"},{"size":587,"mtime":1619166183397,"results":"52","hashOfConfig":"28"},{"size":175,"mtime":1619183862303,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"zxavyk",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"56"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"56"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"56"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"56"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"56"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"C:\\Users\\niall\\Documents\\GitHub\\react-labs\\mern-lab-2-start\\frontend\\src\\index.js",[],["113","114"],"C:\\Users\\niall\\Documents\\GitHub\\react-labs\\mern-lab-2-start\\frontend\\src\\App.js",[],"C:\\Users\\niall\\Documents\\GitHub\\react-labs\\mern-lab-2-start\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\niall\\Documents\\GitHub\\react-labs\\mern-lab-2-start\\frontend\\src\\components\\Layout\\Layout.js",["115","116","117"],"import React, { useCallback, useState, useEffect } from \"react\";\r\nimport { Container } from \"semantic-ui-react\";\r\nimport { Route, Switch, useHistory } from \"react-router-dom\";\r\n\r\nimport \"./Layout.css\";\r\n\r\nimport Nav from \"../Nav/Nav\";\r\nimport PizzaPal from \"../../containers/PizzaPal/PizzaPal\";\r\nimport YourOrders from \"../../containers/YourOrders/YourOrders\";\r\nimport PlaceOrder from \"../../containers/PlaceOrder/PlaceOrder\";\r\nimport OrderSuccess from \"../../containers/PlaceOrder/OrderSuccess/OrderSuccess\";\r\nimport Authenticate from \"../../containers/Authenticate/Authenticate\";\r\nimport YourAccount from \"../../containers/YourAccount/YourAccount\";\r\nimport AccountUpdate from \"../../containers/YourAccount/AccountUpdate/AccountUpdate\";\r\nimport AuthContext from \"../../context/auth-context\";\r\n\r\nconst Layout = (props) => {\r\n\r\n  const [loggedInState, setLoggedInState] = useState({isLoggedIn: false});\r\n  const [token, setToken] = useState(false);\r\n  const [userId, setUserId] = useState(false);\r\n  const history = useHistory;\r\n  const login = useCallback((uid, token) => {\r\n    setToken(token);\r\n    setUserId(uid);\r\n    localStorage.setItem(\r\n      \"userData\",\r\n      JSON.stringify({\r\n        userId: uid,\r\n        token: token\r\n      })\r\n    );\r\n  }, []);\r\n\r\n  const logout = useCallback(() => {\r\n    setToken(null);\r\n    setUserId(null);\r\n    localStorage.removeItem(\"userData\");\r\n    history.push(\"/\");\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const storedData = JSON.parse(localStorage.getItem(\"userData\"));\r\n    if ( storedData && storedData.token ) {\r\n      login(storedData.userId, storedData.token);\r\n    }\r\n  }, [login]);\r\n\r\n  let routes;\r\n  if (token) {\r\n    routes = (\r\n      <Switch>\r\n        <Route path=\"/\" exact component={PizzaPal} />\r\n        <Route path=\"/orders/:uid\" component={YourOrders} />\r\n        <Route path=\"/place-order\" component={PlaceOrder} />\r\n        <Route path=\"/order-success\" component={OrderSuccess} />\r\n        <Route path=\"/users/:uid\" component={YourAccount} />\r\n        <Route path=\"/update-account\" component={AccountUpdate} />\r\n      </Switch>\r\n    );\r\n  } else {\r\n    routes = (\r\n      <Switch>\r\n        <Route path=\"/\" exact component={PizzaPal} />\r\n        <Route path=\"/authenticate\" component={Authenticate} />\r\n      </Switch>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{\r\n        isLoggedIn: !!token,\r\n        token: token,\r\n        userId: userId,\r\n        login: login,\r\n        logout: logout,\r\n      }}\r\n    >\r\n      <Container>\r\n        <Nav />\r\n        {routes}\r\n      </Container>\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default Layout;\r\n","C:\\Users\\niall\\Documents\\GitHub\\react-labs\\mern-lab-2-start\\frontend\\src\\components\\Nav\\Nav.js",[],"C:\\Users\\niall\\Documents\\GitHub\\react-labs\\mern-lab-2-start\\frontend\\src\\containers\\YourOrders\\YourOrders.js",["118","119"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport axios from \"../../axios-orders\";\r\n\r\nimport OrdersTable from \"../../components/OrdersTable/OrdersTable\";\r\nimport Loader from \"../../components/Feedback/Loader/Loader\";\r\nimport ErrorModal from \"../../components/Feedback/ErrorModal/ErrorModal\";\r\nimport AuthContext from \"../../context/auth-context\";\r\n\r\nconst YourOrders = (props) => {\r\n  const auth = useContext(AuthContext);\r\n\r\n  // ORDER, ERROR AND LOADING STATE\r\n\r\n  const [pastOrdersState, setPastOrdersState] = useState({\r\n    orders: [],\r\n  });\r\n\r\n  const [errorState, setErrorState] = useState({\r\n    error: false,\r\n    errorMessage: null,\r\n  });\r\n\r\n  const [loadingState, setLoadingState] = useState({\r\n    isLoading: true,\r\n    ordersLoaded: false,\r\n    loadFailed: false,\r\n  });\r\n\r\n\r\n  // FETCH ORDERS\r\n  \r\n  useEffect(() => {\r\n    let uid = auth.userId;\r\n    let path = \"/deleteuser/\" + uid;\r\n    axios\r\n      .delete(path, { headers: { Authorization: \"Bearer \" + auth.token } })\r\n      .then((response) => {\r\n        console.log(\"User deleted!\");\r\n        auth.logout();\r\n        props.history.push(\"/\");\r\n      })\r\n      .catch((error) => {\r\n        setErrorState({\r\n          error: true,\r\n          errorMessage: error.response.data.message,\r\n        });\r\n        setLoadingState({\r\n          isLoading: false,\r\n          ordersLoaded: loadingState.ordersLoaded,\r\n          loadFailed: loadingState.loadFailed,\r\n        });\r\n      });\r\n  }, []);\r\n\r\n  // ERROR HANDLER\r\n\r\n  const errorHandler = () => {\r\n    setErrorState({\r\n      error: false,\r\n      errorMessage: null,\r\n    });\r\n    setLoadingState({\r\n      isLoading: loadingState.isLoading,\r\n      ordersLoaded: loadingState.ordersLoaded,\r\n      loadFailed: true,\r\n    });\r\n  };\r\n\r\n  // DISPLAY ORDERS\r\n\r\n  let orders = errorState.error ? (\r\n    <ErrorModal error={errorState.errorMessage} onClear={errorHandler} />\r\n  ) : (\r\n    <Loader active={loadingState.isLoading} />\r\n  );\r\n\r\n  if (loadingState.ordersLoaded && pastOrdersState.orders.length > 0) {\r\n    orders = <OrdersTable orders={pastOrdersState.orders} />;\r\n  } else if (loadingState.loadFailed) {\r\n    orders = <p>We can't load your orders... maybe try creating one?</p>;\r\n  }\r\n\r\n  return <div>{orders}</div>;\r\n};\r\n\r\nexport default YourOrders;\r\n","C:\\Users\\niall\\Documents\\GitHub\\react-labs\\mern-lab-2-start\\frontend\\src\\containers\\PizzaPal\\PizzaPal.js",["120"],"import React, { useState, useEffect } from \"react\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport axios from \"../../axios-orders\";\r\n\r\nimport Menu from \"../../components/Menu/Menu\";\r\nimport Order from \"../../components/Order/Order\";\r\nimport Loader from \"../../components/Feedback/Loader/Loader\";\r\nimport ErrorModal from \"../../components/Feedback/ErrorModal/ErrorModal\";\r\n\r\nconst PizzaPal = (props) => {\r\n\r\n  // MENU, ERROR AND LOADING STATE AND GET TOPPINGS FROM FIREBASE\r\n  const [menuState, setMenuState] = useState({\r\n    toppings: [],\r\n  });\r\n\r\n  const [errorState, setErrorState] = useState({\r\n    error: false,\r\n    errorMessage: null,\r\n  });\r\n\r\n  const [loadingState, setLoadingState] = useState({\r\n    isLoading: true,\r\n    loadFailed: false,\r\n  });\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(\"/\")\r\n      .then((response) => {\r\n        let sortedToppings = response.data.toppings.sort(function (a, b) {\r\n          return a.id - b.id;\r\n        });\r\n        setMenuState({ toppings: sortedToppings });\r\n      })\r\n      .catch((error) => {\r\n        let errorMsg = \"\";\r\n        if (error.response) {\r\n          errorMsg = error.response.data.message;\r\n        } else {\r\n          errorMsg = \"There was a problem fetching the menu\";\r\n        }\r\n        setErrorState({\r\n          error: true,\r\n          errorMessage: errorMsg,\r\n        });\r\n        setLoadingState({ isLoading: false, loadFailed: menuState.loadFailed });\r\n        console.log(error.response);\r\n      });\r\n  }, []);\r\n\r\n  // ORDER STATE\r\n\r\n  // Set order state conditionally - either to old order state or starting state\r\n\r\n  const [orderState, setOrderState] = useState({\r\n    totalPrice: props.location.state\r\n      ? props.location.state.order.totalPrice\r\n      : 5,\r\n    chosenToppings: props.location.state\r\n      ? props.location.state.order.chosenToppings\r\n      : [],\r\n  });\r\n\r\n  // EVENT HANDLERS - ADD TOPPING\r\n\r\n  const addToppingHandler = (id) => {\r\n    let order = { ...orderState };\r\n\r\n    // find the chosen topping in the menu\r\n    const menuIndex = menuState.toppings.findIndex(\r\n      (topping) => topping.id === id\r\n    );\r\n\r\n    // check if the topping has already been added to the orderToppings array\r\n    const orderIndex = order.chosenToppings.findIndex(\r\n      (topping) => topping.id === id\r\n    );\r\n\r\n    // if so, increase its count by 1\r\n    if (orderIndex > -1) {\r\n      order.chosenToppings[orderIndex].count++;\r\n    }\r\n    // otherwise (i.e. this topping is being added for the first time)\r\n    // create this topping and add it to the order toppings array\r\n    else {\r\n      // Save the id, name and price of the chosen topping; set its count to 1\r\n      const chosenTopping = {\r\n        id: menuState.toppings[menuIndex].id,\r\n        name: menuState.toppings[menuIndex].alt,\r\n        price: menuState.toppings[menuIndex].price,\r\n        count: 1,\r\n      };\r\n      order.chosenToppings.push(chosenTopping);\r\n    }\r\n\r\n    // Calculate the new price\r\n    const newPrice =\r\n      orderState.totalPrice + menuState.toppings[menuIndex].price;\r\n\r\n    // Update the order state with the new price and updated toppings array\r\n    setOrderState({\r\n      totalPrice: newPrice,\r\n      chosenToppings: order.chosenToppings,\r\n    });\r\n  };\r\n\r\n  // EVENT HANDLERS - REMOVE TOPPING\r\n\r\n  const removeToppingHandler = (id) => {\r\n    let order = { ...orderState };\r\n\r\n    // Find topping with matching id from the orderToppings\r\n    const index = order.chosenToppings.findIndex(\r\n      (topping) => topping.id === id\r\n    );\r\n\r\n    // Get the current price\r\n    let price = order.totalPrice;\r\n\r\n    // If topping was found, update the price and decrease the count\r\n    if (index >= 0) {\r\n      price = price - order.chosenToppings[index].price;\r\n      order.chosenToppings[index].count--;\r\n\r\n      // If the count is now 0, remove the topping completely\r\n      if (order.chosenToppings[index].count < 1) {\r\n        order.chosenToppings.splice(index, 1);\r\n      }\r\n    }\r\n\r\n    // Update order state with updated price and updated toppings array\r\n    setOrderState({\r\n      totalPrice: price,\r\n      chosenToppings: order.chosenToppings,\r\n    });\r\n  };\r\n\r\n  // EVENT HANDLERS - CHECK OUT\r\n\r\n  const checkoutHandler = () => {\r\n    props.history.push({\r\n      pathname: \"place-order\",\r\n      state: {\r\n        order: orderState,\r\n        menu: menuState.toppings,\r\n      },\r\n    });\r\n  };\r\n\r\n  // ERROR HANDLER\r\n\r\n  const errorHandler = () => {\r\n    setErrorState({\r\n      error: false,\r\n      errorMessage: null,\r\n    });\r\n    setLoadingState({\r\n      isLoading: false,\r\n      loadFailed: true,\r\n    });\r\n  };\r\n\r\n  // DISABLE CHECKOUT BUTTON IF NO TOPPINGS CHOSEN\r\n\r\n  let checkoutDisabled = true;\r\n\r\n  if (orderState.chosenToppings.length > 0) {\r\n    checkoutDisabled = false;\r\n  }\r\n\r\n  // DISPLAY PIZZA PAL MENU AND CONTROLS\r\n\r\n  let pizzapalMenu = errorState.error ? (\r\n    <ErrorModal error={errorState.errorMessage} onClear={errorHandler} />\r\n  ) : (\r\n    <Loader active={loadingState.isLoading} />\r\n  );\r\n\r\n  if (menuState.toppings.length > 0) {\r\n    pizzapalMenu = (\r\n      <Grid divided=\"vertically\" stackable>\r\n        <Grid.Row centered>\r\n          <Menu menu={menuState.toppings} />\r\n        </Grid.Row>\r\n        <Order\r\n          menu={menuState.toppings}\r\n          toppingAdded={addToppingHandler}\r\n          toppingRemoved={removeToppingHandler}\r\n          chosenToppings={orderState.chosenToppings}\r\n          totalPrice={orderState.totalPrice}\r\n          checkout={checkoutHandler}\r\n          disabled={checkoutDisabled}\r\n        />\r\n      </Grid>\r\n    );\r\n  } else if (loadingState.loadFailed) {\r\n    pizzapalMenu = (\r\n      <p>\r\n        We're having some issues loading the menu... Please try again later.\r\n      </p>\r\n    );\r\n  }\r\n\r\n  return <div>{pizzapalMenu}</div>;\r\n};\r\n\r\nexport default PizzaPal;\r\n","C:\\Users\\niall\\Documents\\GitHub\\react-labs\\mern-lab-2-start\\frontend\\src\\containers\\PlaceOrder\\PlaceOrder.js",["121"],"import React, { useState, useContext } from \"react\";\r\nimport { Grid, Form, Header, Segment, Select, Button } from \"semantic-ui-react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport axios from \"../../axios-orders\";\r\nimport AuthContext from \"../../context/auth-context\";\r\nimport OrderSummary from \"../../components/Order/Checkout/OrderSummary/OrderSummary\";\r\nimport ErrorModal from \"../../components/Feedback/ErrorModal/ErrorModal\";\r\n\r\nconst PlaceOrder = (props) => {\r\n  const auth = useContext(AuthContext);\r\n\r\n  // CREATE STATES\r\n  const [orderState, setOrderState] = useState({\r\n    totalPrice: props.location.state.order.totalPrice,\r\n    chosenToppings: props.location.state.order.chosenToppings,\r\n  });\r\n\r\n  const [errorState, setErrorState] = useState({\r\n    error: false,\r\n    errorMessage: null,\r\n  });\r\n\r\n  const [customerState, setCustomerState] = useState({\r\n    details: {\r\n      name: \"\",\r\n      phone: \"\",\r\n      method: \"\",\r\n      address: \"\",\r\n    },\r\n  });\r\n\r\n  const [validationState, setValidationState] = useState({\r\n    rules: [\r\n      {\r\n        id: \"form-input-name\",\r\n        message:\r\n          \"Please enter your name (letters and spaces only, min length 2)\",\r\n        required: true,\r\n        valid: false,\r\n      },\r\n      {\r\n        id: \"form-input-phone\",\r\n        message: \"Please enter your phone number (area code and number)\",\r\n        required: true,\r\n        valid: false,\r\n      },\r\n      {\r\n        id: \"form-input-method\",\r\n        message: \"Please choose collection or delivery\",\r\n        required: true,\r\n        valid: false,\r\n      },\r\n      {\r\n        id: \"form-input-address\",\r\n        message: \"Please enter your delivery address (house number and street)\",\r\n        required: false,\r\n        valid: true,\r\n      },\r\n    ],\r\n    formValid: false,\r\n  });\r\n\r\n  const [messageState, setMessageState] = useState({\r\n    name: null,\r\n    phone: null,\r\n    method: null,\r\n    address: null,\r\n  });\r\n\r\n  // CANCEL (GO BACK) HANDLER\r\n  const cancelHandler = () => {\r\n    props.history.push({\r\n      pathname: \"/\",\r\n      state: {\r\n        order: orderState,\r\n      },\r\n    });\r\n  };\r\n\r\n  // VALIDATE FUNCTION\r\n  const validate = (value, inputIdentifier, inputType) => {\r\n    // copy the validation state\r\n    const validation = { ...validationState };\r\n\r\n    // find the rule for this input\r\n    const inputRule = validation.rules.findIndex(\r\n      (input) => input.id === inputIdentifier\r\n    );\r\n\r\n    let message = null;\r\n\r\n    // check if it is required and also empty (for inputs only)\r\n    if (\r\n      validation.rules[inputRule].required &&\r\n      inputType === \"input\" &&\r\n      value.trim() === \"\"\r\n    ) {\r\n      // get the error message and set valid to false\r\n      message = validation.rules[inputRule].message;\r\n      validation.rules[inputRule].valid = false;\r\n    } else if (inputIdentifier === \"form-input-phone\") {\r\n      //check for a valid phone number\r\n\r\n      let pattern = /^[+]?[(]?[0-9]{3,5}[)]?[-\\s.]?[0-9]{6,7}$/;\r\n      let validNum = pattern.test(value);\r\n\r\n      if (validNum) {\r\n        validation.rules[inputRule].valid = true;\r\n      } else {\r\n        validation.rules[inputRule].valid = false;\r\n        message = validation.rules[inputRule].message;\r\n      }\r\n    } else if (inputIdentifier === \"form-input-name\") {\r\n      //check for a valid name (letters and spaces only)\r\n\r\n      let pattern = /^[A-Za-z\\s]{2,30}$/;\r\n      let validName = pattern.test(value);\r\n\r\n      if (validName) {\r\n        validation.rules[inputRule].valid = true;\r\n      } else {\r\n        validation.rules[inputRule].valid = false;\r\n        message = validation.rules[inputRule].message;\r\n      }\r\n    } else if (value === \"Delivery\") {\r\n      //set address to required\r\n      validation.rules[inputRule].valid = true;\r\n      validation.rules[3].valid = false;\r\n      validation.rules[3].required = true;\r\n    } else if (value === \"Collection\") {\r\n      //set address to not required\r\n      validation.rules[inputRule].valid = true;\r\n      validation.rules[3].required = false;\r\n      validation.rules[3].valid = true;\r\n    } else if (\r\n      validation.rules[inputRule].required &&\r\n      inputIdentifier === \"form-input-address\"\r\n    ) {\r\n      //check for a valid address (alphanumeric plus some special characters)\r\n\r\n      let pattern = /^[#.0-9a-zA-Z\\s,-]{2,50}$/;\r\n      let validAddress = pattern.test(value);\r\n\r\n      if (validAddress) {\r\n        validation.rules[inputRule].valid = true;\r\n      } else {\r\n        validation.rules[inputRule].valid = false;\r\n        message = validation.rules[inputRule].message;\r\n      }\r\n    } else {\r\n      // otherwise reset the message and set valid back to true\r\n      message = null;\r\n      validation.rules[inputRule].valid = true;\r\n    }\r\n\r\n    let msgState = { ...messageState };\r\n\r\n    switch (inputIdentifier) {\r\n      case \"form-input-name\":\r\n        msgState.name = message;\r\n        break;\r\n      case \"form-input-phone\":\r\n        msgState.phone = message;\r\n        break;\r\n      case \"form-input-method\":\r\n        msgState.method = message;\r\n        break;\r\n      case \"form-input-address\":\r\n        msgState.address = message;\r\n        break;\r\n      default:\r\n      // code block\r\n    }\r\n\r\n    setMessageState({ ...msgState });\r\n\r\n    // check if the whole form is valid\r\n    let formIsValid = true;\r\n\r\n    for (let i in validation.rules) {\r\n      if (!validation.rules[i].valid) {\r\n        formIsValid = false;\r\n      }\r\n    }\r\n\r\n    // update state\r\n    setValidationState({ rules: validation.rules, formValid: formIsValid });\r\n  };\r\n\r\n  // FORM CHANGED HANDLER\r\n  const formChangedHandler = (event, inputIdentifier, inputType) => {\r\n    let customerDetails = customerState.details;\r\n\r\n    switch (inputIdentifier) {\r\n      case \"form-input-name\":\r\n        customerDetails.name = event.target.value;\r\n        validate(event.target.value, inputIdentifier, inputType);\r\n        break;\r\n      case \"form-input-phone\":\r\n        customerDetails.phone = event.target.value;\r\n        validate(event.target.value, inputIdentifier, inputType);\r\n        break;\r\n      case \"form-input-method\":\r\n        customerDetails.method = event.target.textContent;\r\n        validate(event.target.textContent, inputIdentifier, inputType);\r\n        break;\r\n      case \"form-input-address\":\r\n        customerDetails.address = event.target.value;\r\n        validate(event.target.value, inputIdentifier, inputType);\r\n        break;\r\n      default:\r\n      // code block\r\n    }\r\n\r\n    setCustomerState({ details: customerDetails });\r\n  };\r\n\r\n  // DISABLE/ENABLE FORM SUBMIT BUTTON\r\n\r\n  let disabled = !validationState.formValid;\r\n\r\n  // CHECKOUT HANDLER\r\n\r\n  const checkoutHandler = () => {\r\n\r\n    // get order from orderState\r\n    let order = orderState;\r\n\r\n    // add unique id\r\n    order.id = uuidv4();\r\n\r\n    // create formatted date\r\n    let orderDate = new Date();\r\n\r\n    const months = [\r\n      \"Jan\",\r\n      \"Feb\",\r\n      \"Mar\",\r\n      \"Apr\",\r\n      \"May\",\r\n      \"Jun\",\r\n      \"Jul\",\r\n      \"Aug\",\r\n      \"Sep\",\r\n      \"Oct\",\r\n      \"Nov\",\r\n      \"Dec\",\r\n    ];\r\n    const days = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\r\n\r\n    let dayNum = orderDate.getDay();\r\n    let day = days[dayNum];\r\n\r\n    let monthNum = orderDate.getMonth();\r\n    let month = months[monthNum];\r\n\r\n    let date = orderDate.getDate();\r\n    let year = orderDate.getFullYear();\r\n\r\n    // saves date in the format \"Fri 19 Mar 2021\"\r\n    let formattedDate = day + \" \" + date + \" \" + month + \" \" + year;\r\n\r\n    // add formattedDate to order\r\n    order.date = formattedDate;\r\n\r\n    // add customer details to order\r\n    order.details = customerState.details;\r\n\r\n    // add user id\r\n    order.userId = auth.userId;\r\n\r\n    axios\r\n      .post(\"/checkout\", order, {\r\n        headers: { Authorization: \"Bearer \" + auth.token },\r\n      })\r\n      .catch((error) => {\r\n        let errorMsg = \"\";\r\n        if (error.response) {\r\n          errorMsg = error.response.data.message;\r\n        } else {\r\n          errorMsg = \"There was a problem creating your order\";\r\n        }\r\n        setErrorState({ error: true, errorMessage: errorMsg });\r\n      });\r\n  };\r\n\r\n  // ERROR HANDLER\r\n\r\n  const errorHandler = () => {\r\n    setErrorState({\r\n      error: false,\r\n      errorMessage: null,\r\n    });\r\n  };\r\n\r\n  // DISPLAY ERROR MODAL\r\n\r\n  let orderForm = null;\r\n\r\n  if (errorState.error) {\r\n    orderForm = (\r\n      <ErrorModal error={errorState.errorMessage} onClear={errorHandler} />\r\n    );\r\n  } else {\r\n    orderForm = (\r\n      <Grid>\r\n        <Grid.Row columns={2}>\r\n          <Grid.Column width={6}>\r\n            <Segment color=\"red\">\r\n              <Header as=\"h2\" textAlign=\"center\" color=\"red\">\r\n                Confirm your order:\r\n              </Header>\r\n              <OrderSummary\r\n                menu={props.location.state.menu}\r\n                toppings={props.location.state.order.chosenToppings}\r\n                price={props.location.state.order.totalPrice}\r\n              />\r\n              <Button color=\"red\" onClick={cancelHandler}>\r\n                Go Back\r\n              </Button>\r\n            </Segment>\r\n          </Grid.Column>\r\n\r\n          <Grid.Column width={10}>\r\n            <Segment color=\"red\">\r\n              <Header as=\"h2\" textAlign=\"center\" color=\"red\">\r\n                Enter your details:\r\n              </Header>\r\n              <Form id=\"form\">\r\n                <Form.Input\r\n                  error={messageState.name}\r\n                  required\r\n                  label=\"Name\"\r\n                  placeholder=\"Name\"\r\n                  id=\"form-input-name\"\r\n                  onChange={(event) =>\r\n                    formChangedHandler(event, \"form-input-name\", \"input\")\r\n                  }\r\n                />\r\n                <Form.Input\r\n                  error={messageState.phone}\r\n                  required\r\n                  label=\"Phone\"\r\n                  placeholder=\"Phone e.g. 086-1234567\"\r\n                  id=\"form-input-phone\"\r\n                  onChange={(event) =>\r\n                    formChangedHandler(event, \"form-input-phone\", \"input\")\r\n                  }\r\n                />\r\n                <Form.Field\r\n                  control={Select}\r\n                  required\r\n                  error={messageState.method}\r\n                  label=\"Delivery method\"\r\n                  options={[\r\n                    { key: \"c\", text: \"Collection\", value: \"collection\" },\r\n                    { key: \"d\", text: \"Delivery\", value: \"delivery\" },\r\n                  ]}\r\n                  placeholder=\"Collection or Delivery\"\r\n                  id=\"form-input-method\"\r\n                  onChange={(event) =>\r\n                    formChangedHandler(event, \"form-input-method\", \"select\")\r\n                  }\r\n                />\r\n                <Form.Input\r\n                  error={messageState.address}\r\n                  required={validationState.rules[3].required}\r\n                  fluid\r\n                  label=\"Address\"\r\n                  placeholder=\"Address\"\r\n                  id=\"form-input-address\"\r\n                  onChange={(event) =>\r\n                    formChangedHandler(event, \"form-input-address\", \"input\")\r\n                  }\r\n                />\r\n                <Button\r\n                  type=\"submit\"\r\n                  color=\"green\"\r\n                  disabled={disabled}\r\n                  onClick={checkoutHandler}\r\n                >\r\n                  Submit\r\n                </Button>\r\n              </Form>\r\n            </Segment>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n    );\r\n  }\r\n\r\n  // DISPLAY ORDER SUMMARY AND FORM\r\n\r\n  return <React.Fragment>{orderForm}</React.Fragment>;\r\n};\r\n\r\nexport default withRouter(PlaceOrder);\r\n","C:\\Users\\niall\\Documents\\GitHub\\react-labs\\mern-lab-2-start\\frontend\\src\\containers\\PlaceOrder\\OrderSuccess\\OrderSuccess.js",[],"C:\\Users\\niall\\Documents\\GitHub\\react-labs\\mern-lab-2-start\\frontend\\src\\containers\\YourAccount\\YourAccount.js",["122"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { Grid, Header, Segment, List, Image, Button, Icon, Confirm } from \"semantic-ui-react\";\r\nimport axios from \"../../axios-orders\";\r\n\r\nimport Loader from \"../../components/Feedback/Loader/Loader\";\r\nimport ErrorModal from \"../../components/Feedback/ErrorModal/ErrorModal\";\r\nimport AuthContext from \"../../context/auth-context\";\r\n\r\nconst YourAccount = (props) => {\r\n  const auth = useContext(AuthContext);\r\n\r\n  // ACCOUNT, ERROR AND LOADING STATE\r\n  const [accountState, setAccountState] = useState({\r\n    user: null,\r\n  });\r\n\r\n  const [errorState, setErrorState] = useState({\r\n    error: false,\r\n    errorMessage: null,\r\n  });\r\n\r\n  const [loadingState, setLoadingState] = useState({\r\n    isLoading: true,\r\n    loadFailed: false,\r\n  });\r\n\r\n  // Manage state of confirm deletion dialog\r\n  const [confirmState, setConfirmState] = useState({ open: false });\r\n  const open = () => setConfirmState({ open: true });\r\n  const close = () => setConfirmState({ open: false });\r\n\r\n  // FETCH ACCOUNT DETAILS\r\n  useEffect(() => {\r\n    let uid = auth.userId; \r\n    let path = \"/users/\" + uid;\r\n    axios.get(path, { headers: { Authorization: \"Bearer \" + auth.token } })\r\n      .then((response) => {\r\n        setAccountState({ user: response.data.user });\r\n      })\r\n      .catch((error) => {\r\n        setErrorState({\r\n          error: true,\r\n          errorMessage: error.response.data.message,\r\n        });\r\n        setLoadingState({\r\n          isLoading: false,\r\n          loadFailed: loadingState.loadFailed,\r\n        });\r\n      });\r\n  }, []);\r\n\r\n  // UPDATE AND DELETE HANDLERS\r\n  const updateHandler = () => {\r\n    props.history.push({\r\n      pathname: \"/update-account\",\r\n      state: {\r\n        user: accountState.user,\r\n      },\r\n    });\r\n  };\r\n\r\n  const deleteHandler = () => {\r\n    let uid = \"12345678\";\r\n    let path = \"/deleteuser/\" + uid;\r\n    axios\r\n      .delete(path)\r\n      .then((response) => {\r\n        console.log(\"User deleted!\");\r\n        props.history.push(\"/\");\r\n      })\r\n      .catch((error) => {\r\n        let errorMsg = \"\";\r\n        if (error.response) {\r\n          errorMsg = error.response.data.message;\r\n        } else {\r\n          errorMsg = \"There was a problem deleting your account\";\r\n        }\r\n        setErrorState({ error: true, errorMessage: errorMsg });\r\n      });\r\n  };\r\n\r\n  // ERROR HANDLER\r\n  const errorHandler = () => {\r\n    setErrorState({\r\n      error: false,\r\n      errorMessage: null,\r\n    });\r\n    setLoadingState({\r\n      isLoading: false,\r\n      loadFailed: true,\r\n    });\r\n  };\r\n\r\n  // DISPLAY ACCOUNT\r\n  let account = errorState.error ? (\r\n    <ErrorModal error={errorState.errorMessage} onClear={errorHandler} />\r\n  ) : (\r\n    <Loader active={loadingState.isLoading} />\r\n  );\r\n\r\n  if (accountState.user && !errorState.error) {\r\n    account = (\r\n      <Grid>\r\n        <Grid.Row centered>\r\n          <Grid.Column width={10}>\r\n            <Segment color=\"red\">\r\n              <Grid divided>\r\n                <Grid.Column width={8}>\r\n                  <Header as=\"h3\" textAlign=\"center\" color=\"red\">\r\n                    Your Details\r\n                  </Header>\r\n                  <List>\r\n                    <List.Item>\r\n                      <List.Icon name=\"user\" />\r\n                      <List.Content>\r\n                        <b>Name: {accountState.user.name} </b>\r\n                      </List.Content>\r\n                    </List.Item>\r\n                    <List.Item>\r\n                      <List.Icon name=\"mail\" />\r\n                      <List.Content>\r\n                        <b>Email: {accountState.user.email} </b>\r\n                      </List.Content>\r\n                    </List.Item>\r\n                    <List.Item>\r\n                      <List.Icon name=\"lock\" />\r\n                      <List.Content>\r\n                        <b>Password: </b>{\" \"}\r\n                        &#9642;&#9642;&#9642;&#9642;&#9642;&#9642;{\" \"}\r\n                      </List.Content>\r\n                    </List.Item>\r\n                  </List>\r\n                  <div className=\"accountButtons\">\r\n                    <Button\r\n                      icon\r\n                      labelPosition=\"left\"\r\n                      color=\"orange\"\r\n                      onClick={updateHandler}\r\n                    >\r\n                      <Icon name=\"pencil\" />\r\n                      Update Your Details\r\n                    </Button>\r\n                    <br />\r\n                    <br />\r\n                    <Button\r\n                      icon\r\n                      labelPosition=\"left\"\r\n                      color=\"red\"\r\n                      onClick={open}\r\n                    >\r\n                      Delete Your Account\r\n                      <Icon name=\"trash\" />\r\n                    </Button>\r\n                    <Confirm\r\n                      open={confirmState.open}\r\n                      onCancel={close}\r\n                      onConfirm={deleteHandler}\r\n                      header=\"Are you sure?\"\r\n                      content=\"Deleting your account is a permanent action and cannot be undone\"\r\n                      cancelButton=\"Take me back\"\r\n                      confirmButton=\"Yes, delete my account permanently\"\r\n                    />\r\n                  </div>\r\n                </Grid.Column>\r\n                <Grid.Column width={8} textAlign=\"center\">\r\n                  <Image\r\n                    src=\"https://img.jamieoliver.com/jamieoliver/recipe-database/oldImages/large/1474_2_1430128688.jpg?tr=w-800,h-1066\"\r\n                    rounded\r\n                    size=\"large\"\r\n                  />\r\n                </Grid.Column>\r\n              </Grid>\r\n            </Segment>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n    );\r\n  } else if (loadingState.loadFailed) {\r\n    account = <p>User can't be found</p>;\r\n  }\r\n\r\n  return <React.Fragment>{account}</React.Fragment>;\r\n};\r\n\r\nexport default YourAccount;\r\n","C:\\Users\\niall\\Documents\\GitHub\\react-labs\\mern-lab-2-start\\frontend\\src\\containers\\Authenticate\\Authenticate.js",["123"],"import React, { useState, useContext } from \"react\";\r\nimport { Grid, Form, Header, Segment, Button } from \"semantic-ui-react\";\r\nimport axios from \"../../axios-orders\";\r\n\r\nimport ErrorModal from \"../../components/Feedback/ErrorModal/ErrorModal\";\r\nimport AuthContext from \"../../context/auth-context\";\r\n\r\n\r\n\r\nconst Authenticate = (props) => {\r\n\r\n  const auth = useContext(AuthContext);\r\n\r\n  const [isLoginMode, setIsLoginMode] = useState(false);\r\n\r\n  const [errorState, setErrorState] = useState({\r\n    error: false,\r\n    errorMessage: null,\r\n  });\r\n\r\n  const switchModeHandler = () => {\r\n    setIsLoginMode((prevMode) => !prevMode);\r\n    setAuthDetailsState({\r\n      details: {\r\n        name: \"\",\r\n        email: \"\",\r\n        password: \"\",\r\n      },\r\n    });\r\n    setValidationState({\r\n      rules: [\r\n        {\r\n          id: \"form-input-name\",\r\n          message:\r\n            \"Please enter your name (letters and spaces only, min length 2)\",\r\n          required: true,\r\n          valid: false,\r\n        },\r\n        {\r\n          id: \"form-input-email\",\r\n          message:\r\n            \"Please enter a valid email address (something@something.something)\",\r\n          required: true,\r\n          valid: false,\r\n        },\r\n        {\r\n          id: \"form-input-password\",\r\n          message:\r\n            \"Please enter a password (letters and numbers only, min length 6)\",\r\n          required: true,\r\n          valid: false,\r\n        },\r\n      ],\r\n      formValid: false,\r\n    });\r\n    document.getElementById(\"form\").reset();\r\n  };\r\n\r\n  const [authDetailsState, setAuthDetailsState] = useState({\r\n    details: {\r\n      name: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n    },\r\n  });\r\n\r\n  const [validationState, setValidationState] = useState({\r\n    rules: [\r\n      {\r\n        id: \"form-input-name\",\r\n        message:\r\n          \"Please enter your name (letters and spaces only, min length 2)\",\r\n        required: true,\r\n        valid: false,\r\n      },\r\n      {\r\n        id: \"form-input-email\",\r\n        message:\r\n          \"Please enter a valid email address (something@something.something)\",\r\n        required: true,\r\n        valid: false,\r\n      },\r\n      {\r\n        id: \"form-input-password\",\r\n        message:\r\n          \"Please enter a password (letters and numbers only, min length 6)\",\r\n        required: true,\r\n        valid: false,\r\n      },\r\n    ],\r\n    formValid: false,\r\n  });\r\n\r\n  const [messageState, setMessageState] = useState({\r\n    name: null,\r\n    email: null,\r\n    address: null,\r\n  });\r\n\r\n  const validate = (value, inputIdentifier) => {\r\n    // copy the validation state\r\n    const validation = { ...validationState };\r\n\r\n    // find the rule for this input\r\n    const inputRule = validation.rules.findIndex(\r\n      (input) => input.id === inputIdentifier\r\n    );\r\n\r\n    let message = null;\r\n\r\n    // check if it is required and also empty\r\n    if (validation.rules[inputRule].required && value.trim() === \"\") {\r\n      // get the error message and set valid to false\r\n      message = validation.rules[inputRule].message;\r\n      validation.rules[inputRule].valid = false;\r\n    } else if (inputIdentifier === \"form-input-email\") {\r\n      //check for a valid email\r\n\r\n      let pattern = /^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$/;\r\n      let validEmail = pattern.test(value);\r\n\r\n      if (validEmail) {\r\n        validation.rules[inputRule].valid = true;\r\n      } else {\r\n        validation.rules[inputRule].valid = false;\r\n        message = validation.rules[inputRule].message;\r\n      }\r\n    } else if (inputIdentifier === \"form-input-password\") {\r\n      //check for a valid password, letters and numbers only, 6 characters min\r\n\r\n      let pattern = /^[A-Za-z0-9\\s]{6,}$/;\r\n      let validPassword = pattern.test(value);\r\n\r\n      if (validPassword) {\r\n        validation.rules[inputRule].valid = true;\r\n      } else {\r\n        validation.rules[inputRule].valid = false;\r\n        message = validation.rules[inputRule].message;\r\n      }\r\n    } else if (\r\n      validation.rules[inputRule].required &&\r\n      inputIdentifier === \"form-input-name\"\r\n    ) {\r\n      //check for a valid name (letters and spaces only)\r\n\r\n      let pattern = /^[A-Za-z\\s]{2,30}$/;\r\n      let validName = pattern.test(value);\r\n\r\n      if (validName) {\r\n        validation.rules[inputRule].valid = true;\r\n      } else {\r\n        validation.rules[inputRule].valid = false;\r\n        message = validation.rules[inputRule].message;\r\n      }\r\n    } else {\r\n      // otherwise reset the message and set valid back to true\r\n      message = null;\r\n      validation.rules[inputRule].valid = true;\r\n    }\r\n\r\n    let msgState = { ...messageState };\r\n\r\n    switch (inputIdentifier) {\r\n      case \"form-input-name\":\r\n        msgState.name = message;\r\n        break;\r\n      case \"form-input-email\":\r\n        msgState.email = message;\r\n        break;\r\n      case \"form-input-password\":\r\n        msgState.password = message;\r\n        break;\r\n      default:\r\n      // code block\r\n    }\r\n\r\n    setMessageState({ ...msgState });\r\n\r\n    // check if the whole form is valid\r\n    let formIsValid = true;\r\n\r\n    for (let i in validation.rules) {\r\n      if (isLoginMode && i == 0) {\r\n        continue;\r\n      }\r\n\r\n      if (!validation.rules[i].valid) {\r\n        formIsValid = false;\r\n      }\r\n    }\r\n\r\n    // update state\r\n    setValidationState({ rules: validation.rules, formValid: formIsValid });\r\n  };\r\n\r\n  const formChangedHandler = (event, inputIdentifier) => {\r\n    let authDetails = authDetailsState.details;\r\n\r\n    switch (inputIdentifier) {\r\n      case \"form-input-name\":\r\n        authDetails.name = event.target.value;\r\n        validate(event.target.value, inputIdentifier);\r\n        break;\r\n      case \"form-input-email\":\r\n        authDetails.email = event.target.value;\r\n        validate(event.target.value, inputIdentifier);\r\n        break;\r\n      case \"form-input-password\":\r\n        let password = event.target.value;\r\n        let trimmedPassword = password.trim();\r\n        authDetails.password = trimmedPassword;\r\n        validate(trimmedPassword, inputIdentifier);\r\n        break;\r\n      default:\r\n      // code block\r\n    }\r\n\r\n    setAuthDetailsState({ details: authDetails });\r\n  };\r\n\r\n  const errorHandler = () => {\r\n    setErrorState({\r\n      error: false,\r\n      errorMessage: null,\r\n    });\r\n  };\r\n\r\n  const signupHandler = () => {\r\n    axios\r\n      .post(\"/signup\", authDetailsState.details)\r\n      .then((response) => {\r\n        auth.login(response.data.userId, response.data.token);\r\n        props.history.push(\"/\");\r\n      })\r\n      .catch((error) => {\r\n        let errorMsg = \"\";\r\n        if (error.response) {\r\n          errorMsg = error.response.data.message;\r\n        } else {\r\n          errorMsg = \"Something went wrong - signup failed\";\r\n        }\r\n        setErrorState({ error: true, errorMessage: errorMsg });\r\n      });\r\n  };\r\n\r\n  const loginHandler = () => {\r\n    axios\r\n      .post(\"/login\", authDetailsState.details)\r\n      .then((response) => {\r\n        auth.login(response.data.userId, response.data.token);\r\n        props.history.push(\"/\");\r\n      })\r\n      .catch((error) => {\r\n        let errorMsg = \"\";\r\n        if (error.response) {\r\n          errorMsg = error.response.data.message;\r\n        } else {\r\n          errorMsg = \"Something went wrong - login failed\";\r\n        }\r\n        setErrorState({ error: true, errorMessage: errorMsg });\r\n      });\r\n  };\r\n\r\n  let disabled = !validationState.formValid;\r\n\r\n  let signupBtnColor = \"grey\";\r\n  let loginBtnColor = \"grey\";\r\n\r\n  let authForm = null;\r\n\r\n  if (errorState.error) {\r\n    authForm = (\r\n      <ErrorModal error={errorState.errorMessage} onClear={errorHandler} />\r\n    );\r\n  } else {\r\n    if (isLoginMode) {\r\n      authForm = (\r\n        <Segment color=\"red\">\r\n          <Header as=\"h2\" textAlign=\"center\" color=\"red\">\r\n            Already registered? Log In!\r\n          </Header>\r\n          <Form id=\"form\">\r\n            <Form.Input\r\n              error={messageState.email}\r\n              autoComplete=\"off\"\r\n              required\r\n              label=\"Email\"\r\n              placeholder=\"Email e.g. username@mail.com\"\r\n              id=\"form-input-email\"\r\n              onChange={(event) =>\r\n                formChangedHandler(event, \"form-input-email\")\r\n              }\r\n            />\r\n            <Form.Input\r\n              error={messageState.password}\r\n              type=\"password\"\r\n              autoComplete=\"off\"\r\n              required\r\n              label=\"Password\"\r\n              placeholder=\"Password\"\r\n              id=\"form-input-password\"\r\n              onChange={(event) =>\r\n                formChangedHandler(event, \"form-input-password\")\r\n              }\r\n            />\r\n            <Button\r\n              type=\"submit\"\r\n              color=\"green\"\r\n              disabled={disabled}\r\n              onClick={loginHandler}\r\n            >\r\n              Log In\r\n            </Button>\r\n          </Form>\r\n        </Segment>\r\n      );\r\n      loginBtnColor = \"red\";\r\n    } else {\r\n      authForm = (\r\n        <Segment color=\"red\">\r\n          <Header as=\"h2\" textAlign=\"center\" color=\"red\">\r\n            First time here? Sign Up!\r\n          </Header>\r\n          <Form id=\"form\">\r\n            <Form.Input\r\n              error={messageState.email}\r\n              autoComplete=\"off\"\r\n              required\r\n              label=\"Email\"\r\n              placeholder=\"Email e.g. username@mail.com\"\r\n              id=\"form-input-email\"\r\n              onChange={(event) =>\r\n                formChangedHandler(event, \"form-input-email\")\r\n              }\r\n            />\r\n            <Form.Input\r\n              error={messageState.password}\r\n              type=\"password\"\r\n              autoComplete=\"off\"\r\n              required\r\n              label=\"Password\"\r\n              placeholder=\"Password\"\r\n              id=\"form-input-password\"\r\n              onChange={(event) =>\r\n                formChangedHandler(event, \"form-input-password\")\r\n              }\r\n            />\r\n            <Form.Input\r\n              error={messageState.name}\r\n              autoComplete=\"off\"\r\n              required\r\n              label=\"Name\"\r\n              placeholder=\"Name\"\r\n              id=\"form-input-name\"\r\n              onChange={(event) => formChangedHandler(event, \"form-input-name\")}\r\n            />\r\n            <Button\r\n              type=\"submit\"\r\n              color=\"green\"\r\n              disabled={disabled}\r\n              onClick={signupHandler}\r\n            >\r\n              Sign Up\r\n            </Button>\r\n          </Form>\r\n        </Segment>\r\n      );\r\n      signupBtnColor = \"red\";\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Grid>\r\n      <Grid.Row centered>\r\n        <Grid.Column width={10}>\r\n          <Button.Group widths=\"2\">\r\n            <Button\r\n              size=\"large\"\r\n              color={signupBtnColor}\r\n              onClick={switchModeHandler}\r\n            >\r\n              Sign Up\r\n            </Button>\r\n            <Button.Or />\r\n            <Button\r\n              size=\"large\"\r\n              color={loginBtnColor}\r\n              onClick={switchModeHandler}\r\n            >\r\n              Log In\r\n            </Button>\r\n          </Button.Group>\r\n          {authForm}\r\n        </Grid.Column>\r\n      </Grid.Row>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Authenticate;\r\n","C:\\Users\\niall\\Documents\\GitHub\\react-labs\\mern-lab-2-start\\frontend\\src\\containers\\YourAccount\\AccountUpdate\\AccountUpdate.js",[],"C:\\Users\\niall\\Documents\\GitHub\\react-labs\\mern-lab-2-start\\frontend\\src\\axios-orders.js",[],"C:\\Users\\niall\\Documents\\GitHub\\react-labs\\mern-lab-2-start\\frontend\\src\\components\\OrdersTable\\OrdersTable.js",[],"C:\\Users\\niall\\Documents\\GitHub\\react-labs\\mern-lab-2-start\\frontend\\src\\components\\Order\\Order.js",[],"C:\\Users\\niall\\Documents\\GitHub\\react-labs\\mern-lab-2-start\\frontend\\src\\components\\Menu\\Menu.js",[],"C:\\Users\\niall\\Documents\\GitHub\\react-labs\\mern-lab-2-start\\frontend\\src\\components\\Feedback\\Loader\\Loader.js",[],"C:\\Users\\niall\\Documents\\GitHub\\react-labs\\mern-lab-2-start\\frontend\\src\\components\\Order\\Checkout\\OrderSummary\\OrderSummary.js",[],"C:\\Users\\niall\\Documents\\GitHub\\react-labs\\mern-lab-2-start\\frontend\\src\\components\\Feedback\\ErrorModal\\ErrorModal.js",[],"C:\\Users\\niall\\Documents\\GitHub\\react-labs\\mern-lab-2-start\\frontend\\src\\components\\Order\\Checkout\\Checkout.js",[],"C:\\Users\\niall\\Documents\\GitHub\\react-labs\\mern-lab-2-start\\frontend\\src\\components\\Menu\\MenuItem\\MenuItem.js",[],"C:\\Users\\niall\\Documents\\GitHub\\react-labs\\mern-lab-2-start\\frontend\\src\\components\\Order\\Controls\\Controls.js",[],"C:\\Users\\niall\\Documents\\GitHub\\react-labs\\mern-lab-2-start\\frontend\\src\\components\\OrdersTable\\TableRow\\TableRow.js",[],"C:\\Users\\niall\\Documents\\GitHub\\react-labs\\mern-lab-2-start\\frontend\\src\\components\\Order\\Checkout\\OrderModal\\OrderModal.js",[],"C:\\Users\\niall\\Documents\\GitHub\\react-labs\\mern-lab-2-start\\frontend\\src\\components\\Order\\Controls\\Control\\Control.js",[],"C:\\Users\\niall\\Documents\\GitHub\\react-labs\\mern-lab-2-start\\frontend\\src\\context\\auth-context.js",[],{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","severity":1,"message":"129","line":19,"column":10,"nodeType":"130","messageId":"131","endLine":19,"endColumn":23},{"ruleId":"128","severity":1,"message":"132","line":19,"column":25,"nodeType":"130","messageId":"131","endLine":19,"endColumn":41},{"ruleId":"133","severity":1,"message":"134","line":40,"column":6,"nodeType":"135","endLine":40,"endColumn":8,"suggestions":"136"},{"ruleId":"128","severity":1,"message":"137","line":14,"column":27,"nodeType":"130","messageId":"131","endLine":14,"endColumn":45},{"ruleId":"133","severity":1,"message":"138","line":53,"column":6,"nodeType":"135","endLine":53,"endColumn":8,"suggestions":"139"},{"ruleId":"133","severity":1,"message":"140","line":50,"column":6,"nodeType":"135","endLine":50,"endColumn":8,"suggestions":"141"},{"ruleId":"128","severity":1,"message":"142","line":14,"column":22,"nodeType":"130","messageId":"131","endLine":14,"endColumn":35},{"ruleId":"133","severity":1,"message":"143","line":50,"column":6,"nodeType":"135","endLine":50,"endColumn":8,"suggestions":"144"},{"ruleId":"145","severity":1,"message":"146","line":183,"column":28,"nodeType":"147","messageId":"148","endLine":183,"endColumn":30},"no-native-reassign",["149"],"no-negated-in-lhs",["150"],"no-unused-vars","'loggedInState' is assigned a value but never used.","Identifier","unusedVar","'setLoggedInState' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["151"],"'setPastOrdersState' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'auth', 'loadingState.loadFailed', 'loadingState.ordersLoaded', and 'props.history'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setLoadingState' needs the current value of 'loadingState.ordersLoaded'.",["152"],"React Hook useEffect has a missing dependency: 'menuState.loadFailed'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setLoadingState' needs the current value of 'menuState.loadFailed'.",["153"],"'setOrderState' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'auth.token', 'auth.userId', and 'loadingState.loadFailed'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setLoadingState' needs the current value of 'loadingState.loadFailed'.",["154"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation",{"desc":"155","fix":"156"},{"desc":"157","fix":"158"},{"desc":"159","fix":"160"},{"desc":"161","fix":"162"},"Update the dependencies array to be: [history]",{"range":"163","text":"164"},"Update the dependencies array to be: [auth, loadingState.loadFailed, loadingState.ordersLoaded, props.history]",{"range":"165","text":"166"},"Update the dependencies array to be: [menuState.loadFailed]",{"range":"167","text":"168"},"Update the dependencies array to be: [auth.token, auth.userId, loadingState.loadFailed]",{"range":"169","text":"170"},[1415,1417],"[history]",[1475,1477],"[auth, loadingState.loadFailed, loadingState.ordersLoaded, props.history]",[1489,1491],"[menuState.loadFailed]",[1596,1598],"[auth.token, auth.userId, loadingState.loadFailed]"]