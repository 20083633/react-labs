{"version":3,"sources":["containers/PlaceOrder/PlaceOrder.js"],"names":["withRouter","props","auth","useContext","AuthContext","useState","totalPrice","location","state","order","chosenFillings","orderState","error","errorMessage","errorState","setErrorState","details","name","phone","method","address","customerState","setCustomerState","rules","id","message","required","valid","formValid","validationState","setValidationState","messageState","setMessageState","validate","value","inputIdentifier","inputType","validation","inputRule","findIndex","input","trim","test","console","log","msgState","formIsValid","i","formChangedHandler","event","customerDetails","target","textContent","disabled","orderForm","onClear","Row","columns","Column","width","color","as","textAlign","menu","onClick","history","push","pathname","Input","label","placeholder","onChange","Field","control","Select","options","key","text","fluid","type","userId","orderDate","Date","day","getDay","month","getMonth","formattedDate","getDate","getFullYear","date","axios","post","headers","Authorization","token","then","response","catch","errorMsg","data","Fragment"],"mappings":"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","file":"static/js/7.9f5548eb.chunk.js","sourcesContent":["import React, { useState, useContext } from \"react\";\r\nimport { Grid, Segment, Header, Button, Form, Select } from 'semantic-ui-react';\r\nimport Summary from \"../../components/Order/Checkout/Summary/Summary\";\r\nimport { withRouter } from 'react-router-dom';\r\nimport axios from '../../axios-orders';\r\nimport ErrorModal from '../../components/Feedback/ErrorModal';\r\nimport AuthContext from \"../../context/auth-context\";\r\n// import { v4 as uuidv4 } from 'uuid';\r\n\r\n\r\n\r\n\r\nconst PlaceOrder = (props) => {\r\n\r\nconst auth = useContext(AuthContext);\r\n\r\nconst [orderState, setOrderState] = useState({\r\ntotalPrice: props.location.state.order.totalPrice, \r\nchosenFillings: props.location.state.order.chosenFillings\r\n});  \r\n\r\n\r\nconst [errorState, setErrorState] = useState({\r\nerror: false, \r\nerrorMessage: null\r\n});\r\n\r\nconst [customerState, setCustomerState] = useState({\r\ndetails:{\r\n    name: \"\",\r\n    phone: \"\",\r\n    method: \"\",\r\n    address: \"\"\r\n}\r\n});\r\n\r\n    const [validationState, setValidationState] = useState({\r\n        rules: [\r\n            {\r\n                id: 'form-input-name',\r\n                message: 'Please enter your name',\r\n                required: true,\r\n                valid: false\r\n            },\r\n            {\r\n                id: 'form-input-phone',\r\n                message: 'Please enter your phone number',\r\n                required: true,\r\n                valid: false\r\n            },\r\n            {\r\n                id: 'form-select-method',\r\n                message: 'Please choose collection or delivery',\r\n                required: true,\r\n                valid: false\r\n            },\r\n            {\r\n                id: 'form-input-address',\r\n                message: 'Please enter your delivery address',\r\n                required: false,\r\n                valid: true\r\n            }\r\n        ],\r\n        formValid: false\r\n    });\r\n\r\n    const [messageState, setMessageState] = useState({\r\n        name: null,\r\n        phone: null,\r\n        method: null,\r\n        address: null\r\n    });\r\n\r\n      const cancelHandler = () => {\r\n        props.history.push({\r\n            pathname: '/', \r\n            state: {\r\n              order: orderState, \r\n            }\r\n          });\r\n    };\r\n\r\n\r\n\r\n    const validate = (value, inputIdentifier, inputType) => {\r\n        // copy the validation state\r\n        const validation = {...validationState};\r\n\r\n        // find the rule for this input\r\n        const inputRule = validation.rules.findIndex(input => input.id === inputIdentifier);\r\n\r\n        let message = null;\r\n\r\n        // check if it is required and also empty (for inputs only)\r\n        if (validation.rules[inputRule].required && inputType === 'input' && value.trim() === '') {\r\n            // get the error message and set valid to false\r\n            message = validation.rules[inputRule].message;\r\n            validation.rules[inputRule].valid = false;\r\n        }\r\n        else if (inputIdentifier === \"form-input-name\") {\r\n            //check for a valid name (letters and spaces only)\r\n    \r\n            let pattern = /^[A-Za-z\\s]{2,30}$/;\r\n            let validName = pattern.test(value);\r\n    \r\n            if(validName){\r\n                validation.rules[inputRule].valid = true;\r\n            }\r\n            else{\r\n                validation.rules[inputRule].valid = false;\r\n                message = validation.rules[inputRule].message;\r\n            }\r\n        }\r\n        else if (inputIdentifier === \"form-input-phone\") {\r\n            //check for a valid phone number\r\n    \r\n            let pattern = /^[+]?[(]?[0-9]{3,5}[)]?[-\\s.]?[0-9]{6,7}$/;\r\n            let validNum = pattern.test(value);\r\n    \r\n            if(validNum){\r\n                validation.rules[inputRule].valid = true;\r\n            }\r\n            else{\r\n                validation.rules[inputRule].valid = false;\r\n                message = validation.rules[inputRule].message;\r\n            }\r\n        }\r\n        else if (value === \"Delivery\") {\r\n            //set address to required\r\n            validation.rules[inputRule].valid = true; \r\n            validation.rules[3].valid = false;\r\n            validation.rules[3].required = true;\r\n        }\r\n        else if (value === \"Collection\") {\r\n            //set address to not required\r\n            validation.rules[inputRule].valid = true; \r\n            validation.rules[3].required = false;\r\n            validation.rules[3].valid = true;\r\n        }\r\n        else if (validation.rules[inputRule].required && inputIdentifier === \"form-input-address\") {\r\n            //check for a valid address (alphanumeric plus some special characters)\r\n    \r\n            let pattern = /^[#.0-9a-zA-Z\\s,-]{2,50}$/;\r\n            let validAddress = pattern.test(value);\r\n    \r\n            if(validAddress){\r\n                validation.rules[inputRule].valid = true;\r\n            }\r\n            else{\r\n                validation.rules[inputRule].valid = false;\r\n                message = validation.rules[inputRule].message;\r\n            }\r\n        }\r\n        else {\r\n            // otherwise reset the message and set valid back to true\r\n            message = null;\r\n            validation.rules[inputRule].valid = true;        \r\n        }\r\n\r\n        console.log(message);\r\n\r\n      /*  // update state\r\n        setValidationState({rules: validation.rules, formValid: validation.formValid}); */\r\n\r\n        let msgState = {...messageState};\r\n\r\n        switch(inputIdentifier) {\r\n            case \"form-input-name\":\r\n                msgState.name = message;\r\n                break;\r\n            case \"form-input-phone\":\r\n                msgState.phone = message;\r\n                break;\r\n            case \"form-select-method\":\r\n                msgState.method = message;\r\n                break;\r\n            case \"form-input-address\":\r\n                msgState.address = message;\r\n                break;\r\n            default:\r\n              msgState = {...messageState};\r\n          }\r\n\r\n          setMessageState({...msgState});\r\n\r\n              // check if the whole form is valid\r\n    let formIsValid = true;\r\n\r\n    // check if any of the fields are NOT valid\r\n    for (let i in validation.rules){\r\n        if(!validation.rules[i].valid){\r\n            // and if so, set formIsValid to false\r\n            formIsValid = false;\r\n        }\r\n    }\r\n\r\n    console.log(formIsValid);\r\n\r\n    // update state \r\n    setValidationState({rules: validation.rules, formValid: formIsValid});\r\n    };\r\n\r\n    const formChangedHandler = (event, inputIdentifier, inputType) => {\r\n\r\n        let customerDetails = customerState.details;\r\n\r\n        switch(inputIdentifier) {\r\n            case \"form-input-name\":\r\n                customerDetails.name = event.target.value;\r\n                validate(event.target.value, inputIdentifier, inputType);\r\n                break;\r\n            case \"form-input-phone\":\r\n                customerDetails.phone = event.target.value;\r\n                validate(event.target.value, inputIdentifier, inputType);\r\n                break;\r\n            case \"form-select-method\":\r\n                customerDetails.method = event.target.textContent;\r\n                validate(event.target.textContent, inputIdentifier, inputType);\r\n                break;\r\n            case \"form-input-address\":\r\n                customerDetails.address = event.target.value;\r\n                validate(event.target.value, inputIdentifier, inputType);\r\n                break;\r\n            default:\r\n              // code block\r\n          }\r\n\r\n        setCustomerState({details: customerDetails});\r\n    }\r\n\r\n    let disabled = !validationState.formValid;\r\n\r\n    const checkoutHandler = () => {\r\n        \r\n        // get order from orderState\r\n         let order = orderState;\r\n\r\n        // add user id\r\n         order.userId = auth.userId;\r\n         // add unique id\r\n         //order.id = uuidv4();\r\n\r\n         // create formatted date\r\n         let orderDate = new Date();\r\n\r\n         const months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\r\n         const days = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\r\n\r\n         let dayNum = orderDate.getDay();\r\n         let day = days[dayNum];\r\n\r\n         let monthNum = orderDate.getMonth();\r\n         let month = months[monthNum];\r\n\r\n         let date = orderDate.getDate();\r\n         let year = orderDate.getFullYear();\r\n\r\n         // saves date in the format \"Fri 19 Mar 2021\"\r\n         let formattedDate = day + \" \" + date + \" \" + month + \" \" + year;\r\n\r\n         // add formattedDate to order\r\n         order.date = formattedDate;\r\n\r\n         // add customer details to order\r\n         order.details = customerState.details;\r\n\r\n         axios.post(\"/checkout\", order, {\r\n            headers: { Authorization: \"Bearer \" + auth.token },\r\n          })\r\n         .then(response => {\r\n            props.history.push('/success');\r\n         })\r\n         .catch(error => {\r\n            console.log(error);\r\n\r\n            let errorMsg = '';\r\n            if (error.response) {\r\n                errorMsg = error.response.data.message;\r\n            } else {\r\n                errorMsg = 'There was a problem creating your order';\r\n            }\r\n            setErrorState({error: true, errorMessage: errorMsg});\r\n           });\r\n     }\r\n\r\n         // ERROR HANDLER\r\n\r\n    const errorHandler = () => {\r\n        setErrorState({\r\n            error: false, \r\n            errorMessage: null\r\n        });\r\n    };\r\n\r\n    // DISPLAY ERROR MODAL\r\n\r\n    let orderForm = null;\r\n\r\n    if (errorState.error){\r\n    orderForm = <ErrorModal error={errorState.errorMessage} onClear={errorHandler} />;\r\n    }\r\n    else{\r\n        orderForm = (\r\n    <Grid>\r\n    <Grid.Row columns={2}>\r\n\r\n        <Grid.Column width={6}>\r\n            <Segment color='green'>\r\n                <Header as='h2' textAlign='center' color='green'>\r\n                    Confirm your order:\r\n                </Header>\r\n                <Summary \r\n                    menu = {props.location.state.menu}\r\n                    chosenFillings = {orderState.chosenFillings}\r\n                    totalPrice = {orderState.totalPrice}\r\n                />\r\n                <Button color=\"green\" onClick={cancelHandler}>Go Back</Button>\r\n            </Segment>\r\n        </Grid.Column>\r\n\r\n        <Grid.Column width={10}>\r\n            <Segment color='green'>\r\n                    <Header as='h2' textAlign='center' color='green'>\r\n                        Enter your details:\r\n                    </Header>\r\n                    <Form>\r\n                    <Form.Input\r\n                        error={messageState.name}\r\n                        required\r\n                        label='Name'\r\n                        placeholder='Name'\r\n                        id='form-input-name'\r\n                        onChange={(event) => formChangedHandler(event, 'form-input-name', 'input')}\r\n                    />\r\n                    <Form.Input\r\n                        error={messageState.phone}\r\n                        required\r\n                        label='Phone'\r\n                        placeholder='Phone'\r\n                        id='form-input-phone'\r\n                        onChange={(event) => formChangedHandler(event, 'form-input-phone', 'input')}\r\n                    />\r\n                    <Form.Field\r\n                        control={Select}\r\n                        required\r\n                        error={messageState.method}\r\n                        label='Delivery method'\r\n                        options={[\r\n                            { key: 'c', text: 'Collection', value: 'collection' },\r\n                            { key: 'd', text: 'Delivery', value: 'delivery' }\r\n                        ]}\r\n                        placeholder='Collection or Delivery'\r\n                        id='form-select-method'\r\n                        onChange={(event) => formChangedHandler(event, 'form-select-method', 'select')}\r\n                    />\r\n                    <Form.Input\r\n                        error={messageState.address}\r\n                        required={validationState.rules[3].required}\r\n                        fluid\r\n                        label='Address'\r\n                        placeholder='Address'\r\n                        id='form-input-address'\r\n                        onChange={(event) => formChangedHandler(event, 'form-input-address', 'input')}\r\n                    />\r\n                    <Button type='submit' color='green' disabled={disabled} onClick={checkoutHandler}>Submit</Button>\r\n                </Form>\r\n                </Segment>\r\n        </Grid.Column>\r\n\r\n    </Grid.Row>\r\n</Grid>\r\n);\r\n}\r\n\r\nreturn (\r\n<React.Fragment>\r\n    {orderForm}\r\n</React.Fragment>\r\n)\r\n};\r\nexport default withRouter(PlaceOrder);"],"sourceRoot":""}